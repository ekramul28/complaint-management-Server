// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  password     String
  role         Role
  profilePhoto String?
  admin        Admin?
  customer     Customer?

  replies      Reply[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("users")
}

model Admin {
  userId        String  @id
  user          User    @relation(fields: [userId], references: [id])
  department    String
  email         String  @unique
  name          String
  profilePhoto  String?
  assignedTickets Ticket[] @relation("AdminAssignedTickets")

  tickets       Ticket[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

model Customer {
  userId        String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  phone         String
  profilePhoto  String?
  email         String  @unique
  address       String
  name          String
  tickets       Ticket[] @relation("CustomerCreatedTickets")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Ticket        Ticket[]

  @@map("customers")
}

model Ticket {
  id          String   @id @default(uuid())
  subject     String
  description String
  status      Status   @default(OPEN)
  
  customerId  String  
  customer    Customer @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  
  adminId     String?  
  admin       Admin?   @relation(fields: [adminId], references: [userId], onDelete: SetNull)
  
  replies     Reply[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Admin       Admin[] @relation("AdminAssignedTickets")
  Customer    Customer[] @relation("CustomerCreatedTickets")
    
  @@map("tickets")
}

model Reply {
  id        String   @id @default(uuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Status {
  OPEN
  RESOLVED
  CLOSED
}
